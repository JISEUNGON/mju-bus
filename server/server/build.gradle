plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'com.mjubus'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Swagger-UI
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // JSON (NAVER API)
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // OAuth 2.0 & Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // Http Client
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // Security
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'

    // Google SDK
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.3.0'
    implementation 'com.google.api-client:google-api-client:2.2.0'
    // Spring WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

}
test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
}

jacoco {
    toolVersion = '0.8.5'
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

jacocoTestReport {
//    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/config/*",
                    "**/dto/*",
                    "**/enums/*",
                    "**/exception/*",
                    "**/controller/*",
                    "**/domain/*",
            ])
        }))
    }

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
